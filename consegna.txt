### Fare riferimento sempre al Syllabus per l'effetivo inizio del progetto
## Settimana 03 - Settimana 05
### In this exercise, you will create a simple task management system using JavaScript. You will utilize array methods, setTimeout, functions, callbacks, spread operator, and error management techniques.
### Instructions:
### Setup:
* Create a new JavaScript file named taskManagementSystem.js.
* Open the file in your preferred text editor.
* Task Management System:
* Initialize an empty array named tasks to store task names.
* Function to Add a Task:
* Define a function named addTask that takes two parameters:
* task: A string representing the task to add.
* callback: A callback function to handle the result.
* Inside the addTask function, use setTimeout to simulate an asynchronous operation.
* If the task parameter is empty or not a string, invoke the callback function with an Error object containing the 
message "Task must be a non-empty string".
* Otherwise, add the task to the tasks array and invoke the callback function with null as the first parameter and the message
 "Task added successfully" as the second parameter.

### Function to Complete a Task: PER LUNEDì 27-05-24
### Define a function named completeTask that takes two parameters:
* index: An integer representing the index of the task to complete.
* callback: A callback function to handle the result.

Inside the completeTask function, use setTimeout to simulate an asynchronous operation.
If the index parameter is out of range (less than 0 or greater than or equal to the length of the tasks array), 
invoke the callback function with an Error object containing the message "Invalid task index".
Otherwise, remove the task at the specified index from the tasks array and invoke the callback function with 
null as the first parameter and the message "Task completed successfully" as the second parameter.

Function to List Tasks:
Define a function named listTasks that does not take any parameters.
Inside the listTasks function, log each task in the tasks array to the console, along with its corresponding index.

### Example Usage:
Add tasks using the addTask function with different inputs, including an empty string.
Complete tasks using the completeTask function with valid and invalid indices.
List tasks using the listTasks function to verify the changes.
Error Handling:
Implement error handling in the example usage to handle errors returned by the addTask and completeTask functions.
Testing:
Test your task management system with various scenarios to ensure proper functionality and error handling.

ITALIANO

In questo esercizio creerai un semplice sistema di gestione delle attività utilizzando JavaScript. 
Utilizzerai metodi di array, setTimeout, funzioni, callback, operatore di spread e tecniche di gestione degli errori.
### Istruzioni:
### Impostare:
OKEY * Crea un nuovo file JavaScript denominato taskManagementSystem.js. 
OKEY * Apri il file nel tuo editor di testo preferito.
OKEY * Sistema di gestione delle attività:
OKEY * Inizializza un array vuoto denominato task per memorizzare i nomi delle attività.
* Funzione per aggiungere un'attività:
* Definire una funzione denominata addTask che accetta due parametri:
        - task: una stringa che rappresenta l'attività da aggiungere.
        - callback: una funzione di callback per gestire il risultato.
    - All'interno della funzione addTask, utilizzare setTimeout per simulare un'operazione asincrona.
    - Se il parametro dell'attività è vuoto o non è una stringa, 
    richiama la funzione di callback con un oggetto Error contenente il file
    messaggio "L'attività deve essere una stringa non vuota".
    - Altrimenti, aggiungi l'attività all'array delle attività e 
    richiama la funzione di callback con null come primo parametro e 
    messaggio "Attività aggiunta correttamente" come secondo parametro.

### Funzione per completare un compito: PER LUNEdì 27-05-24
### Definisci una funzione denominata completeTask che accetta due parametri:
    * indice: un numero intero che rappresenta l'indice dell'attività da completare.
    * callback: una funzione di callback per gestire il risultato.

All'interno della funzione completeTask, utilizzare setTimeout per simulare un'operazione asincrona.
Se il parametro indice è fuori intervallo (meno di 0 o maggiore o uguale alla lunghezza dell'array delle attività),
richiamare la funzione di callback con un oggetto Error contenente il messaggio "Indice attività non valido".
Altrimenti, rimuovi l'attività all'indice specificato dall'array delle attività e richiama la funzione di callback con
null come primo parametro e il messaggio "Attività completata correttamente" come secondo parametro.

Funzione per elencare le attività:
Definire una funzione denominata listTasks che non accetta alcun parametro.
All'interno della funzione listTasks, registra ogni attività nell'array delle attività sulla console, 
insieme al relativo indice corrispondente.

### Esempio di utilizzo:
Aggiungi attività utilizzando la funzione addTask con input diversi, inclusa una stringa vuota.
Completa le attività utilizzando la funzione completeTask con indici validi e non validi.
Elenca le attività utilizzando la funzione listTasks per verificare le modifiche.
Gestione degli errori:
Implementare la gestione degli errori nell'utilizzo di esempio per gestire gli errori restituiti dalle funzioni addTask e 
completeTask.
Test:
Metti alla prova il tuo sistema di gestione delle attività con vari scenari per garantire la corretta funzionalità e 
gestione degli errori.